{"ast":null,"code":"var _jsxFileName = \"/Users/rb/Desktop/FullstackCourse/part2/phonebook/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [persons, setPersons] = useState([{\n    name: 'Arto Hellas'\n  }]);\n  const [newName, setNewName] = useState('');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Phonebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"name: \", /*#__PURE__*/_jsxDEV(\"input\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Numbers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), \"...\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"aTn020yyTFs05vL+sw6bqJvkaA8=\");\n_c = App;\nexport default App;\n\n// import { useState } from 'react'\n\n// const Info = ({ info }) => {\n//   return (\n//     <li>{info.info}</li>\n//   )\n// }\n\n// const App = () => {\n//   const [persons, setPersons] = useState([{ name: 'Arto Hellas' }]) \n//   const [newName, setNewName] = useState('')\n\n//   const addInfo = (e)=>{\n//     e.preventDefault()\n//     const infoObject =  {\n//       info:newName,\n//       date: new Date().toISOString(),\n//       id: persons.length+1\n//     }\n//     setPersons(persons.concat(infoObject))\n//     setNewName('')\n//   }\n\n//   //   const addNote = (event) => {\n// //     event.preventDefault()\n// //     const noteObject = {\n// //       content: newNote,\n// //       date: new Date().toISOString(),\n// //       important: Math.random() < 0.5,\n// //       id: notes.length + 1,\n// //     }\n\n// //     setNotes(notes.concat(noteObject))\n// //     setNewNote('')\n// //   }\n\n//   const handleInfoChange = (e)=>{\n//     console.log(e.target.value)\n//     setNewName(e.target.value)\n//   }\n\n//   const infoToShow = persons\n//   //   const notesToShow = showAll ? notes : notes.filter(note => note.important === true)\n\n//   //   const handleNoteChange = (event)=>{\n// //     console.log(event.target.value)\n// //     setNewNote(event.target.value)\n// //   }\n\n//   return (\n//     <div>\n//       <h2>Phonebook</h2>\n//       <form onSubmit={addInfo}>\n//         <div>\n//           name: <input value={newName} onChange={handleInfoChange}/>\n//         </div>\n//         <div>\n//           <button type=\"submit\">add</button>\n//         </div>\n//       </form>\n//       <h2>Numbers</h2>\n//       <ul>\n//         {infoToShow.map(p=> <Info key={p.id} info={p.info}/>)}\n//       </ul>\n//     </div>\n//   )\n// }\n// //       <ul>\n// //         {notesToShow.map(note =>\n// //           <Note key={note.id} note={note} />\n// //         )}\n// //       </ul>\n\n// //       <form onSubmit={addNote}>\n// //         <input value={newNote} onChange={handleNoteChange}/>        \n// //         <button type=\"submit\">save</button>\n// //       </form>   \n\n// export default App\n\n// import { useState } from 'react'\n// import Note from './components/Note'\n\n// const App = (props) => {\n\n//   const [notes, setNotes] = useState(props.notes) \n//   const [newNote, setNewNote] = useState('')\n//   const [showAll, setShowAll] = useState(true)  \n\n//   const addNote = (event) => {\n//     event.preventDefault()\n//     const noteObject = {\n//       content: newNote,\n//       date: new Date().toISOString(),\n//       important: Math.random() < 0.5,\n//       id: notes.length + 1,\n//     }\n\n//     setNotes(notes.concat(noteObject))\n//     setNewNote('')\n//   }\n\n//   const handleNoteChange = (event)=>{\n//     console.log(event.target.value)\n//     setNewNote(event.target.value)\n//   }\n\n//   const notesToShow = showAll ? notes : notes.filter(note => note.important === true)\n\n//   return (\n//     <div>\n//       <h1>Notes</h1>\n//       <div>        \n//         <button onClick={() => setShowAll(!showAll)}> show {showAll ? 'important' : 'all' }</button>      \n//       </div>      \n//       <ul>\n//         {notesToShow.map(note =>\n//           <Note key={note.id} note={note} />\n//         )}\n//       </ul>\n//       <form onSubmit={addNote}>\n//         <input value={newNote} onChange={handleNoteChange}/>        \n//         <button type=\"submit\">save</button>\n//       </form>   \n//     </div>\n//   )\n// }\n\n// export default App\n\n// //steps of how this works \n// /*\n// 1) you create a form that calls addNote function \n// 2) addNote function first prevents the form from refreshing using the preventDefault, \n// in addNote a note object is created that is holding the value of newNote (new note has no value and instead has a placeholder value using useState())\n// and at the same time creating an id by adding one to the array based on the array from index.js:\n\n// ReactDOM.createRoot(document.getElementById('root')).render(\n//   <App notes={notes} />\n// )\n\n// after the object is created setNotes is called and copies the array from the noteObject and the new note is is replaced with a blank slate.\n\n// 3) the input has two values newNote and onChange, newNote is the blank value and the onChange handleNoteChange Function is used to update the input live and set the \n//   setNewNote value to\n\n// 4) the submit button activates the first step.\n\n// */\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","App","persons","setPersons","name","newName","setNewName"],"sources":["/Users/rb/Desktop/FullstackCourse/part2/phonebook/src/App.js"],"sourcesContent":["import { useState } from 'react'\n\nconst App = () => {\n  const [persons, setPersons] = useState([\n    { name: 'Arto Hellas' }\n  ]) \n  const [newName, setNewName] = useState('')\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <form>\n        <div>\n          name: <input />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n      <h2>Numbers</h2>\n      ...\n    </div>\n  )\n}\n\nexport default App\n\n// import { useState } from 'react'\n\n// const Info = ({ info }) => {\n//   return (\n//     <li>{info.info}</li>\n//   )\n// }\n\n// const App = () => {\n//   const [persons, setPersons] = useState([{ name: 'Arto Hellas' }]) \n//   const [newName, setNewName] = useState('')\n\n//   const addInfo = (e)=>{\n//     e.preventDefault()\n//     const infoObject =  {\n//       info:newName,\n//       date: new Date().toISOString(),\n//       id: persons.length+1\n//     }\n//     setPersons(persons.concat(infoObject))\n//     setNewName('')\n//   }\n\n//   //   const addNote = (event) => {\n// //     event.preventDefault()\n// //     const noteObject = {\n// //       content: newNote,\n// //       date: new Date().toISOString(),\n// //       important: Math.random() < 0.5,\n// //       id: notes.length + 1,\n// //     }\n  \n// //     setNotes(notes.concat(noteObject))\n// //     setNewNote('')\n// //   }\n\n//   const handleInfoChange = (e)=>{\n//     console.log(e.target.value)\n//     setNewName(e.target.value)\n//   }\n\n//   const infoToShow = persons\n//   //   const notesToShow = showAll ? notes : notes.filter(note => note.important === true)\n\n\n//   //   const handleNoteChange = (event)=>{\n// //     console.log(event.target.value)\n// //     setNewNote(event.target.value)\n// //   }\n\n//   return (\n//     <div>\n//       <h2>Phonebook</h2>\n//       <form onSubmit={addInfo}>\n//         <div>\n//           name: <input value={newName} onChange={handleInfoChange}/>\n//         </div>\n//         <div>\n//           <button type=\"submit\">add</button>\n//         </div>\n//       </form>\n//       <h2>Numbers</h2>\n//       <ul>\n//         {infoToShow.map(p=> <Info key={p.id} info={p.info}/>)}\n//       </ul>\n//     </div>\n//   )\n// }\n// //       <ul>\n// //         {notesToShow.map(note =>\n// //           <Note key={note.id} note={note} />\n// //         )}\n// //       </ul>\n\n// //       <form onSubmit={addNote}>\n// //         <input value={newNote} onChange={handleNoteChange}/>        \n// //         <button type=\"submit\">save</button>\n// //       </form>   \n\n// export default App\n\n\n// import { useState } from 'react'\n// import Note from './components/Note'\n\n\n// const App = (props) => {\n\n//   const [notes, setNotes] = useState(props.notes) \n//   const [newNote, setNewNote] = useState('')\n//   const [showAll, setShowAll] = useState(true)  \n\n//   const addNote = (event) => {\n//     event.preventDefault()\n//     const noteObject = {\n//       content: newNote,\n//       date: new Date().toISOString(),\n//       important: Math.random() < 0.5,\n//       id: notes.length + 1,\n//     }\n  \n//     setNotes(notes.concat(noteObject))\n//     setNewNote('')\n//   }\n\n//   const handleNoteChange = (event)=>{\n//     console.log(event.target.value)\n//     setNewNote(event.target.value)\n//   }\n\n//   const notesToShow = showAll ? notes : notes.filter(note => note.important === true)\n\n\n//   return (\n//     <div>\n//       <h1>Notes</h1>\n//       <div>        \n//         <button onClick={() => setShowAll(!showAll)}> show {showAll ? 'important' : 'all' }</button>      \n//       </div>      \n//       <ul>\n//         {notesToShow.map(note =>\n//           <Note key={note.id} note={note} />\n//         )}\n//       </ul>\n//       <form onSubmit={addNote}>\n//         <input value={newNote} onChange={handleNoteChange}/>        \n//         <button type=\"submit\">save</button>\n//       </form>   \n//     </div>\n//   )\n// }\n\n// export default App\n\n// //steps of how this works \n// /*\n// 1) you create a form that calls addNote function \n// 2) addNote function first prevents the form from refreshing using the preventDefault, \n// in addNote a note object is created that is holding the value of newNote (new note has no value and instead has a placeholder value using useState())\n// and at the same time creating an id by adding one to the array based on the array from index.js:\n\n// ReactDOM.createRoot(document.getElementById('root')).render(\n//   <App notes={notes} />\n// )\n\n// after the object is created setNotes is called and copies the array from the noteObject and the new note is is replaced with a blank slate.\n\n// 3) the input has two values newNote and onChange, newNote is the blank value and the onChange handleNoteChange Function is used to update the input live and set the \n//   setNewNote value to\n\n// 4) the submit button activates the first step.\n\n// */"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAA;AAEhC,MAAMC,GAAG,GAAG,MAAM;EAAA;EAChB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGH,QAAQ,CAAC,CACrC;IAAEI,IAAI,EAAE;EAAc,CAAC,CACxB,CAAC;EACF,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAE1C,oBACE;IAAA,wBACE;MAAA,UAAI;IAAS;MAAA;MAAA;MAAA;IAAA,QAAK,eAClB;MAAA,wBACE;QAAA,WAAK,QACG;UAAA;UAAA;UAAA;QAAA,QAAS;MAAA;QAAA;QAAA;QAAA;MAAA,QACX,eACN;QAAA,uBACE;UAAQ,IAAI,EAAC,QAAQ;UAAA,UAAC;QAAG;UAAA;UAAA;UAAA;QAAA;MAAS;QAAA;QAAA;QAAA;MAAA,QAC9B;IAAA;MAAA;MAAA;MAAA;IAAA,QACD,eACP;MAAA,UAAI;IAAO;MAAA;MAAA;MAAA;IAAA,QAAK,OAElB;EAAA;IAAA;IAAA;IAAA;EAAA,QAAM;AAEV,CAAC;AAAA,GArBKC,GAAG;AAAA,KAAHA,GAAG;AAuBT,eAAeA,GAAG;;AAElB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}