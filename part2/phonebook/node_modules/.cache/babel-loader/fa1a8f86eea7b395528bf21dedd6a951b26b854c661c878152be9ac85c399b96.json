{"ast":null,"code":"var _jsxFileName = \"/Users/rb/Desktop/FullstackCourse/part2/phonebook/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Info = _ref => {\n  let {\n    info\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: info.info\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n};\n_c = Info;\nconst App = () => {\n  _s();\n  const [persons, setPersons] = useState([{\n    name: 'Arto Hellas'\n  }]);\n  const [newName, setNewName] = useState('');\n  const addInfo = e => {\n    e.preventDefault();\n    const infoObject = {\n      info: newName,\n      date: new Date().toISOString(),\n      id: persons.length + 1\n    };\n    setPersons(persons.concat(infoObject));\n    setNewName('');\n  };\n\n  //   const addNote = (event) => {\n  //     event.preventDefault()\n  //     const noteObject = {\n  //       content: newNote,\n  //       date: new Date().toISOString(),\n  //       important: Math.random() < 0.5,\n  //       id: notes.length + 1,\n  //     }\n\n  //     setNotes(notes.concat(noteObject))\n  //     setNewNote('')\n  //   }\n\n  const handleInfoChange = e => {\n    console.log(e.target.value);\n    setNewName(e.target.value);\n  };\n  const infoToShow = persons;\n  //   const notesToShow = showAll ? notes : notes.filter(note => note.important === true)\n\n  //   const handleNoteChange = (event)=>{\n  //     console.log(event.target.value)\n  //     setNewNote(event.target.value)\n  //   }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Phonebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addInfo,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"name: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: newName,\n          onChange: handleInfoChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Numbers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: infoToShow.map(p => /*#__PURE__*/_jsxDEV(Info, {\n        info: p.info\n      }, p.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 29\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n//       <ul>\n//         {notesToShow.map(note =>\n//           <Note key={note.id} note={note} />\n//         )}\n//       </ul>\n\n//       <form onSubmit={addNote}>\n//         <input value={newNote} onChange={handleNoteChange}/>        \n//         <button type=\"submit\">save</button>\n//       </form>   \n_s(App, \"6lWk2U9379AjZlWocmHQqkxYkc0=\");\n_c2 = App;\nexport default App;\n\n// import { useState } from 'react'\n// import Note from './components/Note'\n\n// const App = (props) => {\n\n//   const [notes, setNotes] = useState(props.notes) \n//   const [newNote, setNewNote] = useState('')\n//   const [showAll, setShowAll] = useState(true)  \n\n//   const addNote = (event) => {\n//     event.preventDefault()\n//     const noteObject = {\n//       content: newNote,\n//       date: new Date().toISOString(),\n//       important: Math.random() < 0.5,\n//       id: notes.length + 1,\n//     }\n\n//     setNotes(notes.concat(noteObject))\n//     setNewNote('')\n//   }\n\n//   const handleNoteChange = (event)=>{\n//     console.log(event.target.value)\n//     setNewNote(event.target.value)\n//   }\n\n//   const notesToShow = showAll ? notes : notes.filter(note => note.important === true)\n\n//   return (\n//     <div>\n//       <h1>Notes</h1>\n//       <div>        \n//         <button onClick={() => setShowAll(!showAll)}> show {showAll ? 'important' : 'all' }</button>      \n//       </div>      \n//       <ul>\n//         {notesToShow.map(note =>\n//           <Note key={note.id} note={note} />\n//         )}\n//       </ul>\n//       <form onSubmit={addNote}>\n//         <input value={newNote} onChange={handleNoteChange}/>        \n//         <button type=\"submit\">save</button>\n//       </form>   \n//     </div>\n//   )\n// }\n\n// export default App\n\n// //steps of how this works \n// /*\n// 1) you create a form that calls addNote function \n// 2) addNote function first prevents the form from refreshing using the preventDefault, \n// in addNote a note object is created that is holding the value of newNote (new note has no value and instead has a placeholder value using useState())\n// and at the same time creating an id by adding one to the array based on the array from index.js:\n\n// ReactDOM.createRoot(document.getElementById('root')).render(\n//   <App notes={notes} />\n// )\n\n// after the object is created setNotes is called and copies the array from the noteObject and the new note is is replaced with a blank slate.\n\n// 3) the input has two values newNote and onChange, newNote is the blank value and the onChange handleNoteChange Function is used to update the input live and set the \n//   setNewNote value to\n\n// 4) the submit button activates the first step.\n\n// */\nvar _c, _c2;\n$RefreshReg$(_c, \"Info\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["useState","Info","info","App","persons","setPersons","name","newName","setNewName","addInfo","e","preventDefault","infoObject","date","Date","toISOString","id","length","concat","handleInfoChange","console","log","target","value","infoToShow","map","p"],"sources":["/Users/rb/Desktop/FullstackCourse/part2/phonebook/src/App.js"],"sourcesContent":["import { useState } from 'react'\n\nconst Info = ({ info }) => {\n  return (\n    <li>{info.info}</li>\n  )\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([{ name: 'Arto Hellas' }]) \n  const [newName, setNewName] = useState('')\n\n  const addInfo = (e)=>{\n    e.preventDefault()\n    const infoObject =  {\n      info:newName,\n      date: new Date().toISOString(),\n      id: persons.length+1\n    }\n    setPersons(persons.concat(infoObject))\n    setNewName('')\n  }\n\n  //   const addNote = (event) => {\n//     event.preventDefault()\n//     const noteObject = {\n//       content: newNote,\n//       date: new Date().toISOString(),\n//       important: Math.random() < 0.5,\n//       id: notes.length + 1,\n//     }\n  \n//     setNotes(notes.concat(noteObject))\n//     setNewNote('')\n//   }\n\n  const handleInfoChange = (e)=>{\n    console.log(e.target.value)\n    setNewName(e.target.value)\n  }\n\n  const infoToShow = persons\n  //   const notesToShow = showAll ? notes : notes.filter(note => note.important === true)\n\n\n  //   const handleNoteChange = (event)=>{\n//     console.log(event.target.value)\n//     setNewNote(event.target.value)\n//   }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <form onSubmit={addInfo}>\n        <div>\n          name: <input value={newName} onChange={handleInfoChange}/>\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n      <h2>Numbers</h2>\n      <ul>\n        {infoToShow.map(p=> <Info key={p.id} info={p.info}/>)}\n      </ul>\n    </div>\n  )\n}\n//       <ul>\n//         {notesToShow.map(note =>\n//           <Note key={note.id} note={note} />\n//         )}\n//       </ul>\n\n//       <form onSubmit={addNote}>\n//         <input value={newNote} onChange={handleNoteChange}/>        \n//         <button type=\"submit\">save</button>\n//       </form>   \n\nexport default App\n\n\n// import { useState } from 'react'\n// import Note from './components/Note'\n\n\n// const App = (props) => {\n\n//   const [notes, setNotes] = useState(props.notes) \n//   const [newNote, setNewNote] = useState('')\n//   const [showAll, setShowAll] = useState(true)  \n\n//   const addNote = (event) => {\n//     event.preventDefault()\n//     const noteObject = {\n//       content: newNote,\n//       date: new Date().toISOString(),\n//       important: Math.random() < 0.5,\n//       id: notes.length + 1,\n//     }\n  \n//     setNotes(notes.concat(noteObject))\n//     setNewNote('')\n//   }\n\n//   const handleNoteChange = (event)=>{\n//     console.log(event.target.value)\n//     setNewNote(event.target.value)\n//   }\n\n//   const notesToShow = showAll ? notes : notes.filter(note => note.important === true)\n\n\n//   return (\n//     <div>\n//       <h1>Notes</h1>\n//       <div>        \n//         <button onClick={() => setShowAll(!showAll)}> show {showAll ? 'important' : 'all' }</button>      \n//       </div>      \n//       <ul>\n//         {notesToShow.map(note =>\n//           <Note key={note.id} note={note} />\n//         )}\n//       </ul>\n//       <form onSubmit={addNote}>\n//         <input value={newNote} onChange={handleNoteChange}/>        \n//         <button type=\"submit\">save</button>\n//       </form>   \n//     </div>\n//   )\n// }\n\n// export default App\n\n// //steps of how this works \n// /*\n// 1) you create a form that calls addNote function \n// 2) addNote function first prevents the form from refreshing using the preventDefault, \n// in addNote a note object is created that is holding the value of newNote (new note has no value and instead has a placeholder value using useState())\n// and at the same time creating an id by adding one to the array based on the array from index.js:\n\n// ReactDOM.createRoot(document.getElementById('root')).render(\n//   <App notes={notes} />\n// )\n\n// after the object is created setNotes is called and copies the array from the noteObject and the new note is is replaced with a blank slate.\n\n// 3) the input has two values newNote and onChange, newNote is the blank value and the onChange handleNoteChange Function is used to update the input live and set the \n//   setNewNote value to\n\n// 4) the submit button activates the first step.\n\n// */"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAA;AAEhC,MAAMC,IAAI,GAAG,QAAc;EAAA,IAAb;IAAEC;EAAK,CAAC;EACpB,oBACE;IAAA,UAAKA,IAAI,CAACA;EAAI;IAAA;IAAA;IAAA;EAAA,QAAM;AAExB,CAAC;AAAA,KAJKD,IAAI;AAMV,MAAME,GAAG,GAAG,MAAM;EAAA;EAChB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGL,QAAQ,CAAC,CAAC;IAAEM,IAAI,EAAE;EAAc,CAAC,CAAC,CAAC;EACjE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMS,OAAO,GAAIC,CAAC,IAAG;IACnBA,CAAC,CAACC,cAAc,EAAE;IAClB,MAAMC,UAAU,GAAI;MAClBV,IAAI,EAACK,OAAO;MACZM,IAAI,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE;MAC9BC,EAAE,EAAEZ,OAAO,CAACa,MAAM,GAAC;IACrB,CAAC;IACDZ,UAAU,CAACD,OAAO,CAACc,MAAM,CAACN,UAAU,CAAC,CAAC;IACtCJ,UAAU,CAAC,EAAE,CAAC;EAChB,CAAC;;EAED;EACF;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEE,MAAMW,gBAAgB,GAAIT,CAAC,IAAG;IAC5BU,OAAO,CAACC,GAAG,CAACX,CAAC,CAACY,MAAM,CAACC,KAAK,CAAC;IAC3Bf,UAAU,CAACE,CAAC,CAACY,MAAM,CAACC,KAAK,CAAC;EAC5B,CAAC;EAED,MAAMC,UAAU,GAAGpB,OAAO;EAC1B;;EAGA;EACF;EACA;EACA;;EAEE,oBACE;IAAA,wBACE;MAAA,UAAI;IAAS;MAAA;MAAA;MAAA;IAAA,QAAK,eAClB;MAAM,QAAQ,EAAEK,OAAQ;MAAA,wBACtB;QAAA,WAAK,QACG;UAAO,KAAK,EAAEF,OAAQ;UAAC,QAAQ,EAAEY;QAAiB;UAAA;UAAA;UAAA;QAAA,QAAE;MAAA;QAAA;QAAA;QAAA;MAAA,QACtD,eACN;QAAA,uBACE;UAAQ,IAAI,EAAC,QAAQ;UAAA,UAAC;QAAG;UAAA;UAAA;UAAA;QAAA;MAAS;QAAA;QAAA;QAAA;MAAA,QAC9B;IAAA;MAAA;MAAA;MAAA;IAAA,QACD,eACP;MAAA,UAAI;IAAO;MAAA;MAAA;MAAA;IAAA,QAAK,eAChB;MAAA,UACGK,UAAU,CAACC,GAAG,CAACC,CAAC,iBAAG,QAAC,IAAI;QAAY,IAAI,EAAEA,CAAC,CAACxB;MAAK,GAAnBwB,CAAC,CAACV,EAAE;QAAA;QAAA;QAAA;MAAA,QAAiB;IAAC;MAAA;MAAA;MAAA;IAAA,QAClD;EAAA;IAAA;IAAA;IAAA;EAAA,QACD;AAEV,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA,GArEMb,GAAG;AAAA,MAAHA,GAAG;AAuET,eAAeA,GAAG;;AAGlB;AACA;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}