{"ast":null,"code":"//importing axios to execute methods needed to get data from server and utilize other functions\nimport axios from 'axios';\n//url of the server where the data is coming from \nconst baseUrl = \"https://restcountries.com/v3.1/all\";\n\n//getAll is used to get the data from the server\nconst getAll = () => {\n  //const request is initalizing where the data will be coming from\n  const request = axios.get(baseUrl);\n  return request.then(response => {\n    console.log('promise fulfilled: got restcountries api');\n    let sorted = response.data.slice().sort((a, b) => {\n      if (a.name.common < b.name.common) return -1;\n      if (a.name.common > b.name.common) return 1;\n      return 0;\n    });\n    setCountries(sorted);\n  });\n};\n\n/*\n  useEffect(() => {\n    axios\n      .get('https://restcountries.com/v2/all')\n      .then((response) => setCountries(response.data))\n      .catch((error) => console.error(error));\n  }, []);\n*/\n\n//returning functions\nexport default {\n  getAll\n};\n\n/*\n  useEffect(() => {\n    axios.get(\"https://restcountries.com/v2/all\")\n      .then(res => setCountries(res.data))\n      .catch(err => console.error(err));\n  }, []);\n*/","map":{"version":3,"names":["axios","baseUrl","getAll","request","get","then","response","console","log","sorted","data","slice","sort","a","b","name","common","setCountries"],"sources":["/Users/rb/Desktop/FullstackCourse/part2/dataforcountries/src/services/countriesServices.js"],"sourcesContent":["//importing axios to execute methods needed to get data from server and utilize other functions\nimport axios from 'axios';\n//url of the server where the data is coming from \nconst baseUrl = \"https://restcountries.com/v3.1/all\"\n\n\n//getAll is used to get the data from the server\nconst getAll = ()=>{\n    //const request is initalizing where the data will be coming from\n    const request = axios.get(baseUrl)\n    return request.then(response => {\n      console.log('promise fulfilled: got restcountries api')\n      let sorted = response.data.slice().sort((a, b) => {\n        if (a.name.common < b.name.common) return -1;\n        if (a.name.common > b.name.common) return 1;\n        return 0;\n      })\n      setCountries(sorted)\n    })\n}\n\n\n/*\n  useEffect(() => {\n    axios\n      .get('https://restcountries.com/v2/all')\n      .then((response) => setCountries(response.data))\n      .catch((error) => console.error(error));\n  }, []);\n*/\n\n\n\n//returning functions\nexport default {getAll}\n\n/*\n  useEffect(() => {\n    axios.get(\"https://restcountries.com/v2/all\")\n      .then(res => setCountries(res.data))\n      .catch(err => console.error(err));\n  }, []);\n*/"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA,MAAMC,OAAO,GAAG,oCAAoC;;AAGpD;AACA,MAAMC,MAAM,GAAG,MAAI;EACf;EACA,MAAMC,OAAO,GAAGH,KAAK,CAACI,GAAG,CAACH,OAAO,CAAC;EAClC,OAAOE,OAAO,CAACE,IAAI,CAACC,QAAQ,IAAI;IAC9BC,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;IACvD,IAAIC,MAAM,GAAGH,QAAQ,CAACI,IAAI,CAACC,KAAK,EAAE,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MAChD,IAAID,CAAC,CAACE,IAAI,CAACC,MAAM,GAAGF,CAAC,CAACC,IAAI,CAACC,MAAM,EAAE,OAAO,CAAC,CAAC;MAC5C,IAAIH,CAAC,CAACE,IAAI,CAACC,MAAM,GAAGF,CAAC,CAACC,IAAI,CAACC,MAAM,EAAE,OAAO,CAAC;MAC3C,OAAO,CAAC;IACV,CAAC,CAAC;IACFC,YAAY,CAACR,MAAM,CAAC;EACtB,CAAC,CAAC;AACN,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA,eAAe;EAACP;AAAM,CAAC;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}