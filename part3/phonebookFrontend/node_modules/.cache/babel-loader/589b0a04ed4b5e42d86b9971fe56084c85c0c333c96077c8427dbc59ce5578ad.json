{"ast":null,"code":"import axios from\"axios\";//where all the local data is\nvar baseUrl=\"http://localhost:3001/persons\";//getAll is used to get the data from the server\nvar getAll=function getAll(){//const request is initalizing where the data will be coming from\nvar request=axios.get(baseUrl);//the return is using request.then and skimming through the parameters data and returning that data\nreturn request.then(function(response){return response.data;});};//create has a parameter that is looking for newObject\nvar create=function create(newObject){//same as axios.post('http://localhost:3001/persons',nameObject)\n/*request has two parameters in the axios.post, first where the server is and what new object will be \n    created. newObject is the object that will be saved into the server\n    */var request=axios.post(baseUrl,newObject);//the return is being used to skim through each response and gathering the data\nreturn request.then(function(response){return response.data;});};//update has two parameters: id, newObject, this function is being used to update data from the server\nvar update=function update(id,newObject){/*request is being initalized from the the base url and a specific id, along with the object that will\n    be updated\n    */var request=axios.put(\"\".concat(baseUrl,\"/\").concat(id),newObject);//the return is being used to skim through each response and gathering the data\nreturn request.then(function(response){return response.data;});};//delete has one parameter: id, this function will delete the users url id and will cause the person to be delete from server\nvar deletePerson=function deletePerson(id){//the request will delete the url containing the specific id\nvar request=axios.delete(\"\".concat(baseUrl,\"/\").concat(id));//the return is being used to skim through each response and gathering the data\nreturn request.then(function(response){return response.data;});};export default{getAll:getAll,create:create,update:update,deletePerson:deletePerson};","map":{"version":3,"names":["axios","baseUrl","getAll","request","get","then","response","data","create","newObject","post","update","id","put","deletePerson","delete"],"sources":["/Users/rb/Desktop/FullstackCourse/part3/phonebookFrontend/src/services/persons.js"],"sourcesContent":["import axios from \"axios\";\n\n//where all the local data is\nconst baseUrl = \"http://localhost:3001/persons\"\n\n//getAll is used to get the data from the server\nconst getAll = ()=>{\n    //const request is initalizing where the data will be coming from\n    const request = axios.get(baseUrl)\n    //the return is using request.then and skimming through the parameters data and returning that data\n    return request.then(response => response.data)\n}\n\n//create has a parameter that is looking for newObject\nconst create = (newObject) => {\n    //same as axios.post('http://localhost:3001/persons',nameObject)\n    /*request has two parameters in the axios.post, first where the server is and what new object will be \n    created. newObject is the object that will be saved into the server\n    */\n    const request = axios.post(baseUrl,newObject)\n    //the return is being used to skim through each response and gathering the data\n    return request.then(response => response.data)\n}\n\n//update has two parameters: id, newObject, this function is being used to update data from the server\nconst update = (id,newObject)=>{\n    /*request is being initalized from the the base url and a specific id, along with the object that will\n    be updated\n    */\n    const request = axios.put(`${baseUrl}/${id}`,newObject)\n    //the return is being used to skim through each response and gathering the data\n    return request.then(response => response.data)\n}\n\n//delete has one parameter: id, this function will delete the users url id and will cause the person to be delete from server\nconst deletePerson = (id) =>{\n    //the request will delete the url containing the specific id\n    const request = axios.delete(`${baseUrl}/${id}`)\n    //the return is being used to skim through each response and gathering the data\n    return request.then(response => response.data)\n}\n\n\nexport default {getAll,create,update, deletePerson}"],"mappings":"AAAA,MAAOA,MAAK,KAAM,OAAO,CAEzB;AACA,GAAMC,QAAO,CAAG,+BAA+B,CAE/C;AACA,GAAMC,OAAM,CAAG,QAATA,OAAM,EAAO,CACf;AACA,GAAMC,QAAO,CAAGH,KAAK,CAACI,GAAG,CAACH,OAAO,CAAC,CAClC;AACA,MAAOE,QAAO,CAACE,IAAI,CAAC,SAAAC,QAAQ,QAAIA,SAAQ,CAACC,IAAI,GAAC,CAClD,CAAC,CAED;AACA,GAAMC,OAAM,CAAG,QAATA,OAAM,CAAIC,SAAS,CAAK,CAC1B;AACA;AACJ;AACA,MACI,GAAMN,QAAO,CAAGH,KAAK,CAACU,IAAI,CAACT,OAAO,CAACQ,SAAS,CAAC,CAC7C;AACA,MAAON,QAAO,CAACE,IAAI,CAAC,SAAAC,QAAQ,QAAIA,SAAQ,CAACC,IAAI,GAAC,CAClD,CAAC,CAED;AACA,GAAMI,OAAM,CAAG,QAATA,OAAM,CAAIC,EAAE,CAACH,SAAS,CAAG,CAC3B;AACJ;AACA,MACI,GAAMN,QAAO,CAAGH,KAAK,CAACa,GAAG,WAAIZ,OAAO,aAAIW,EAAE,EAAGH,SAAS,CAAC,CACvD;AACA,MAAON,QAAO,CAACE,IAAI,CAAC,SAAAC,QAAQ,QAAIA,SAAQ,CAACC,IAAI,GAAC,CAClD,CAAC,CAED;AACA,GAAMO,aAAY,CAAG,QAAfA,aAAY,CAAIF,EAAE,CAAI,CACxB;AACA,GAAMT,QAAO,CAAGH,KAAK,CAACe,MAAM,WAAId,OAAO,aAAIW,EAAE,EAAG,CAChD;AACA,MAAOT,QAAO,CAACE,IAAI,CAAC,SAAAC,QAAQ,QAAIA,SAAQ,CAACC,IAAI,GAAC,CAClD,CAAC,CAGD,cAAe,CAACL,MAAM,CAANA,MAAM,CAACM,MAAM,CAANA,MAAM,CAACG,MAAM,CAANA,MAAM,CAAEG,YAAY,CAAZA,YAAY,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}