{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "App.js",
  "steps": [
    {
      "file": "src/App.js",
      "description": "we are declaring notes as the current state value, setNotes function can be used to update the notes value. the initial starting value is based on the useState, in this case we are declaring the start as an empty array.",
      "line": 8,
      "selection": {
        "start": {
          "line": 1,
          "character": 1
        },
        "end": {
          "line": 1,
          "character": 220
        }
      }
    },
    {
      "file": "src/App.js",
      "description": "we are declaring newNote as the current state value, setNewNote function can be used to update the notes value. the initial starting value is based on the useState, in this case we are declaring the start as an empty string.",
      "line": 9
    },
    {
      "file": "src/App.js",
      "description": "we are declaring showAll as the current state value, setShowAll function can be used to update the notes value. the initial starting value is based on the useState, in this case we are declaring the start as true boolean value.",
      "line": 10
    },
    {
      "file": "src/App.js",
      "description": "we are declaring errorMessage as the current state value, setErrorMessage function can be used to update the notes value. the initial starting value is based on the useState, in this case we are declaring the start as a null value.",
      "line": 11
    },
    {
      "file": "src/App.js",
      "description": "this useEffect is being used to get data.",
      "line": 13
    },
    {
      "file": "src/App.js",
      "description": "we are using the imported noteService module's getAll() method, if the method is successful in the module the data is then saved into the initialNotes parameter and then set as the new value of notes using the setNotes function to update the value.",
      "line": 14
    },
    {
      "file": "src/App.js",
      "description": "the reason why we have an empty array at the end is because the empty array indicates that the useEffect doesnâ€™t have any dependencies on any state variables. Therefore, the callback function is only called once the page renders in this case. For example: Fetch data from an API endpoint when the page renders. ",
      "line": 19
    },
    {
      "file": "src/App.js",
      "description": "addNotes is based on an arrow function with event as the parameter. in this function we use event.preventDefault() to prevent the page from refreshing.\nafterwards we create a new noteObject with two values: content (which will have the value of the user input) and important which has a chance of being set as important if the random number is greater than 0.5.",
      "line": 21
    },
    {
      "file": "src/App.js",
      "description": "we then use the noteService's create method to create a new object based on our noteObject, if successful the data is then saved to returnedNote. After the data is saved it is then set as the value of setNotes, we use notes.concat(returnedNote) to add the new note to the current notes then save it as the new notes array. that is done we setNewNote as an empty string so a user can create a new note. ",
      "line": 28
    },
    {
      "file": "src/App.js",
      "description": "this function is used to keep track of the user input and everytime there is a change the new value of setNewNote is changed meaning the value of newNote is constantly being updated.",
      "line": 36
    },
    {
      "file": "src/App.js",
      "description": "notesToShow will show the array of notes if showAll's value is true. Since the value of showAll is true to start with the notesToShow will execute the first if statement, but if the value of showALl were to be false it would then execute a notes.filter and filter all notes that have the important value in their object.",
      "line": 40
    },
    {
      "file": "src/App.js",
      "description": "this function is using id as a parameter.",
      "line": 44
    },
    {
      "file": "src/App.js",
      "description": "we declare the note by using notes.find and using n as the parameter to look through the notes array and search for n.id that matches the specific id from the id parameter.",
      "line": 45
    },
    {
      "file": "src/App.js",
      "description": "changedNote is based on the object of the spread of note and then changing the value of the note to not important.",
      "line": 46
    },
    {
      "file": "src/App.js",
      "description": "noteService is using the update method with id and changedNote as prameters. if successful the data is saved into returnedNote and then setNotes saves the value of notes.map.\n\nthe notes.map is mapping each item in the array and saving each piece of data as note, then it uses a ternary operator. if note.id is not equal to id then return note, else return returnedNote.",
      "line": 48
    },
    {
      "file": "src/App.js",
      "description": "if there was an error in the then method then we catch the error and save the data to error, we then use the setErrorMessage method to inform that the note was already removed. then we set a setTimeout method and use a arrow function to set the setErrorMessage to null after 5 seconds. then we set the value of setNotes and use notes.filter to filter all the notes that don't match the id.",
      "line": 52
    },
    {
      "file": "src/App.js",
      "description": "we are returning many components, each having their own keys.",
      "line": 63
    }
  ]
}